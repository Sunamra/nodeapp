#@ Implement Zombie and Orphan Process

#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <stdlib.h>

int main()
{
    pid_t pid;

    printf("\nZombie Process Demo : \n");
    pid = fork();
    if (pid < 0)
    {
        perror("Fork failed");
        exit(1);
    }
    else if (pid == 0)
    {
        printf("Child exited, Zombie Process Created.\n");
        _exit(0);
    }
    else
    {
        // Parent sleeps, doesn't wait immediately
        sleep(5);
        wait(NULL); // Reaps zombie
        printf("Zombie Process Cleaned Up by Parent.\n");
    }

    printf("\nOrphan Process Demo : \n");
    pid = fork();
    if (pid < 0)
    {
        perror("Fork failed");
        exit(1);
    }
    else if (pid == 0)
    {
        sleep(5); // Sleep to ensure parent exits
        printf("Orphan process is adopted by init.\n");
        printf("Orphan Process PID: %d, new PPID: %d\n", getpid(), getppid());
    }
    else
    {
        printf("Parent exited, Orphan Process Created\n");
        _exit(0); // Exit to make child orphan
    }

    return 0;
}
